// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:daddy@localhost:5432/caesar"
}

model Organisation {
  id        Int     @id @default(autoincrement())
  name      String  @unique @db.VarChar(255)
  createdAt DateTime @default(now())
  users     UserOrganisation[]
  items     Item[]
  requests  Request[]
  Product   Product[]
  labels    Label[]
}

model User {
  id             Int     @id @default(autoincrement())
  email          String  @unique @db.VarChar(255)
  name           String  @db.VarChar(255)
  isAdmin        Boolean @default(false)
  organisations  UserOrganisation[]
  requests       Request[]
  assignedItems  Item[] @relation("ItemAssignment")
}

model UserOrganisation {
  userId         Int
  organisationId Int
  user           User           @relation(fields: [userId], references: [id])
  organisation   Organisation   @relation(fields: [organisationId], references: [id])
  @@id([userId, organisationId])
}

model TwoFA {
  id        Int    @id @default(autoincrement())
  userEmail String @unique
  code      Int
}

model Label {
  id             Int      @id @default(autoincrement())
  name           String   @db.VarChar(255)
  color          String   @db.VarChar(7) // hex color code
  organisationId Int
  organisation   Organisation @relation(fields: [organisationId], references: [id])
  products       ProductLabel[]
  
  @@unique([name, organisationId])
}

model Product {
  id             Int      @id @default(autoincrement())
  name           String   @unique @db.VarChar(255)
  description    String?  @db.Text
  totalQuantity  Int      @default(0)
  organisationId Int
  organisation   Organisation @relation(fields: [organisationId], references: [id])
  items          Item[]
  labels         ProductLabel[]
}

model ProductLabel {
  productId Int
  labelId   Int
  product   Product @relation(fields: [productId], references: [id])
  label     Label   @relation(fields: [labelId], references: [id])
  
  @@id([productId, labelId])
}

model Item {
  id             Int        @id @default(autoincrement())
  serialCode     String     @unique
  status         ItemStatus @default(AVAILABLE)
  assignedTo     Int?
  productId      Int
  organisationId Int
  createdAt      DateTime   @default(now())
  assignedUser   User?        @relation("ItemAssignment", fields: [assignedTo], references: [id])
  product        Product      @relation(fields: [productId], references: [id])
  organisation   Organisation @relation(fields: [organisationId], references: [id])
  requests       Request[]
}

model Request {
  id             Int           @id @default(autoincrement())
  userId         Int
  itemId         Int
  organisationId Int
  type           RequestType
  status         RequestStatus @default(PENDING)
  createdAt      DateTime      @default(now())
  user           User          @relation(fields: [userId], references: [id])
  item           Item          @relation(fields: [itemId], references: [id])
  organisation   Organisation  @relation(fields: [organisationId], references: [id])
  statusLogs     StatusLog[]
}

model StatusLog {
  id             Int           @id @default(autoincrement())
  requestId      Int
  status         RequestStatus
  changedByName  String        @db.VarChar(255)
  createdAt      DateTime      @default(now())
  request        Request       @relation(fields: [requestId], references: [id])
}

enum ItemStatus {
  AVAILABLE
  IN_USE
  BROKEN
  UNDER_REPAIR
}

enum RequestType {
  BORROW
  RETURN
  REPAIR
}

enum RequestStatus {
  PENDING
  APPROVED
  DENIED
  CANCELLED
  COMPLETED
}
